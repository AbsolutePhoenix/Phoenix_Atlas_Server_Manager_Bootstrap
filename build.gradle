plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'java'
    id 'maven-publish'
}

def className = "PhoenixAtlasServerManagerBootstrap"
def programVersion = "1.1.0"
def codeName = null
def mainClassPath = "games.absolutephoenix"
def packageName = className.toLowerCase()
def versionFileName = "Reference.java"
def versionJavaFile = "src/main/java/games/absolutephoenix/$packageName/reference/$versionFileName"
def tmpDir = "build/tmp/sourcesCache"

group = "games.absolutephoenix"
archivesBaseName = className


sourceCompatibility = targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    // https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20210307'
    // https://mvnrepository.com/artifact/org.ini4j/ini4j
    implementation group: 'org.ini4j', name: 'ini4j', version: '0.5.4'

    implementation files('lib/darcula.jar')

}

jar { manifest { attributes 'Main-Class': "$mainClassPath.$packageName.$className" } }

compileJava.doFirst {
    copy{
        from{versionJavaFile}
        into(tmpDir)
    }
    ant.replace(file: versionJavaFile, token: '@VERSION@', value: version)
}

compileJava.doLast {
    copy{
        from(tmpDir + '/' + versionFileName)
        into(project.file(versionJavaFile).parent)
    }
}

if(JavaVersion.current().isJava8Compatible())
{
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclient.none', '-quiet')
    }
}

shadowJar{

    destinationDir((new File("$projectDir/../Compiled Software/Java")))
    archiveBaseName.set("$className")
    archiveAppendix.set(null)
    archiveClassifier.set(null)
    archiveVersion.set("$programVersion")
    archiveExtension.set("jar")

    dependencies{
    }
}

build.dependsOn(shadowJar)
